using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

public class GlobalSpawner : MonoBehaviour
{
    [SerializeField] 
    private GameObject gravSwitch;

    [SerializeField] 
    private GameObject note;

    private GameObject newItem;
    private SpriteRenderer rend;
    private Vector3 spawnPos;
    private Note nodeHandler; 

    //IMPORTANT: length of 2d time will have one more element {0, 0}, be aware of index!
    private float[,] time = new float[,]
    {
        { 0, 0 }, { 2.4f, 2.4f }, { 2.7f, 2.7f }, { 3.15f, 3.15f }, { 3.3f, 3.3f }, { 3.45f, 3.45f }, { 3.6f, 3.9f },
        { 4.2f, 4.5f }, { 4.8f, 5.1f }, { 5.2f, 5.2f }, { 5.4f, 5.4f }, { 5.85f, 5.85f }, { 6.0f, 6.0f },
        { 6.6f, 6.6f }, { 7.2f, 7.2f }, { 7.8f, 7.8f }, { 8.4f, 8.4f }, { 8.7f, 8.7f }, { 8.8f, 8.8f }, { 8.9f, 8.9f },
        { 9.0f, 9.0f }, { 9.3f, 9.3f }, { 9.6f, 9.6f }, { 9.9f, 9.9f }, { 10.2f, 10.2f }, { 10.5f, 10.5f },
        { 10.8f, 10.8f }, { 11.1f, 11.1f }, { 11.4f, 11.4f }, { 11.7f, 11.7f }, { 12.0f, 12.0f }, { 12.3f, 12.3f },
        { 12.75f, 12.75f }, { 12.9f, 12.9f }, { 13.05f, 13.05f }, { 13.2f, 13.2f }, { 13.5f, 13.5f }, { 13.8f, 13.8f },
        { 14.4f, 14.4f }, { 14.7f, 14.7f }, { 15.0f, 15.0f }, { 15.3f, 15.3f }, { 15.6f, 15.6f }, { 15.75f, 15.75f },
        { 15.9f, 15.9f }, { 16.05f, 16.05f }, { 16.2f, 16.2f }, { 16.35f, 16.35f }, { 16.5f, 16.5f },
        { 16.65f, 16.65f }, { 16.8f, 16.8f }, { 16.95f, 16.95f }, { 17.1f, 17.1f }, { 17.25f, 17.25f },
        { 17.4f, 17.4f }, { 17.55f, 17.55f }, { 17.7f, 17.7f }, { 17.85f, 17.85f }, { 18.0f, 18.0f },
        { 18.15f, 18.15f }, { 18.3f, 18.3f }, { 18.45f, 18.45f }, { 18.6f, 18.6f }, { 18.75f, 18.75f },
        { 18.9f, 18.9f }, { 19.05f, 19.05f }, { 19.2f, 19.2f }, { 19.35f, 19.35f }, { 19.5f, 19.5f },
        { 19.65f, 19.65f }, { 19.8f, 19.8f }, { 19.95f, 19.95f }, { 20.1f, 20.1f }, { 20.25f, 20.25f },
        { 20.4f, 20.4f }, { 20.55f, 20.55f }, { 20.7f, 20.7f }, { 20.85f, 20.85f }, { 21.0f, 21.0f }, { 21.3f, 21.3f },
        { 21.6f, 21.6f }, { 21.75f, 21.75f }, { 21.9f, 21.9f }, { 22.05f, 22.05f }, { 22.2f, 22.2f },
        { 22.35f, 22.35f }, { 22.5f, 22.5f }, { 22.65f, 22.65f }, { 22.8f, 22.8f }, { 22.95f, 22.95f },
        { 23.1f, 23.1f }, { 23.25f, 23.25f }, { 23.4f, 23.4f }, { 23.7f, 23.7f }, { 23.85f, 23.85f }, { 24.0f, 24.0f },
        { 24.15f, 24.15f }, { 24.3f, 24.3f }, { 24.45f, 24.45f }, { 24.6f, 24.6f }, { 24.75f, 24.75f },
        { 24.9f, 24.9f }, { 25.05f, 25.05f }, { 25.2f, 25.2f }, { 25.35f, 25.35f }, { 25.5f, 25.5f },
        { 25.65f, 25.65f }, { 25.8f, 25.8f }, { 26.1f, 26.1f }, { 26.25f, 26.25f }, { 26.4f, 26.4f },
        { 26.55f, 26.55f }, { 26.7f, 26.7f }, { 26.85f, 26.85f }, { 27.0f, 27.0f }, { 27.15f, 27.15f },
        { 27.3f, 27.3f }, { 27.45f, 27.45f }, { 27.6f, 27.6f }, { 27.75f, 27.75f }, { 27.9f, 27.9f },
        { 28.05f, 28.05f }, { 28.2f, 28.2f }, { 28.35f, 28.35f }, { 28.5f, 28.5f }, { 28.65f, 28.65f },
        { 28.8f, 28.8f }, { 28.95f, 28.95f }, { 29.1f, 29.1f }, { 29.25f, 29.25f }, { 29.4f, 29.4f },
        { 29.55f, 29.55f }, { 29.7f, 29.7f }, { 29.85f, 29.85f }, { 30.0f, 30.0f }, { 30.3f, 30.3f }, { 30.6f, 30.6f },
        { 30.9f, 30.9f }, { 31.2f, 31.2f }, { 31.35f, 31.35f }, { 31.5f, 31.5f }, { 31.65f, 31.65f }, { 31.8f, 31.8f },
        { 31.95f, 31.95f }, { 32.1f, 32.1f }, { 32.25f, 32.25f }, { 32.4f, 32.4f }, { 32.55f, 32.55f },
        { 32.7f, 32.7f }, { 32.85f, 32.85f }, { 33.0f, 33.0f }, { 33.15f, 33.15f }, { 33.3f, 33.3f },
        { 33.45f, 33.45f }, { 33.6f, 33.6f }, { 33.75f, 33.75f }, { 33.9f, 33.9f }, { 34.05f, 34.05f },
        { 34.2f, 34.2f }, { 34.35f, 34.35f }, { 34.5f, 34.5f }, { 34.65f, 34.65f }, { 34.8f, 34.8f },
        { 34.95f, 34.95f }, { 35.1f, 35.1f }, { 35.25f, 35.25f }, { 35.4f, 35.4f }, { 35.7f, 35.7f },
        { 35.85f, 35.85f }, { 36.0f, 36.0f }, { 36.15f, 36.15f }, { 36.3f, 36.3f }, { 36.45f, 36.45f },
        { 36.6f, 36.6f }, { 36.75f, 36.75f }, { 36.9f, 36.9f }, { 37.2f, 37.2f }, { 37.35f, 37.35f }, { 37.5f, 37.5f },
        { 37.65f, 37.65f }, { 37.8f, 37.8f }, { 37.95f, 37.95f }, { 38.1f, 38.1f }, { 38.25f, 38.25f },
        { 38.4f, 38.4f }, { 38.7f, 38.7f }, { 39.0f, 39.0f }, { 39.3f, 39.3f }, { 39.45f, 39.45f }, { 39.6f, 40.5f },
        { 40.8f, 40.8f }, { 41.1f, 41.1f }, { 41.4f, 41.4f }, { 41.55f, 41.55f }, { 41.7f, 41.7f }, { 41.85f, 41.85f },
        { 42.0f, 42.0f }, { 42.3f, 42.3f }, { 42.6f, 42.9f }, { 43.2f, 43.2f }, { 43.5f, 43.5f }, { 43.65f, 44.1f },
        { 44.25f, 44.7f }, { 45.0f, 45.3f }, { 45.6f, 45.9f }, { 46.2f, 46.5f }, { 46.8f, 46.8f }, { 47.1f, 47.4f },
        { 47.7f, 47.7f }, { 48.0f, 48.3f }, { 48.6f, 48.6f }, { 48.9f, 48.9f }, { 49.2f, 49.2f }, { 49.5f, 49.5f },
        { 49.8f, 49.8f }, { 50.1f, 50.1f }, { 50.25f, 50.25f }, { 50.4f, 50.7f }, { 51.0f, 51.0f }, { 51.15f, 51.15f },
        { 51.3f, 51.3f }, { 51.45f, 51.45f }, { 51.6f, 51.6f }, { 51.9f, 51.9f }, { 52.2f, 52.5f }, { 52.8f, 52.8f },
        { 53.1f, 53.1f }, { 53.4f, 53.7f }, { 54.0f, 54.0f }, { 54.15f, 54.15f }, { 54.3f, 54.3f }, { 54.45f, 54.45f },
        { 54.6f, 54.6f }, { 54.75f, 54.75f }, { 54.9f, 54.9f }, { 55.05f, 55.05f }, { 55.2f, 55.2f },
        { 55.35f, 55.35f }, { 55.5f, 55.5f }, { 55.65f, 55.65f }, { 55.8f, 55.8f }, { 55.95f, 55.95f },
        { 56.1f, 56.1f }, { 56.25f, 56.25f }, { 56.4f, 56.4f }, { 56.55f, 56.55f }, { 56.7f, 56.7f },
        { 56.85f, 56.85f }, { 57.0f, 57.0f }, { 57.15f, 57.15f }, { 57.3f, 57.3f }, { 57.45f, 57.45f },
        { 57.6f, 57.6f }, { 57.75f, 57.75f }, { 57.9f, 57.9f }, { 58.05f, 58.05f }, { 58.2f, 58.2f },
        { 58.35f, 58.35f }, { 58.5f, 58.5f }, { 58.65f, 58.65f }, { 58.8f, 58.8f }, { 58.95f, 58.95f },
        { 59.1f, 59.1f }, { 59.25f, 59.25f }, { 59.4f, 59.7f }, { 60.0f, 60.3f }, { 60.6f, 60.6f }, { 60.75f, 60.75f },
        { 60.9f, 60.9f }, { 61.05f, 61.05f }, { 61.2f, 61.2f }, { 61.5f, 61.5f }, { 61.8f, 62.1f }, { 62.4f, 62.4f },
        { 62.7f, 62.7f }, { 62.85f, 63.3f }, { 63.45f, 63.9f }, { 64.2f, 64.5f }, { 64.8f, 65.1f }, { 65.4f, 65.7f },
        { 66.0f, 66.0f }, { 66.3f, 66.6f }, { 66.9f, 66.9f }, { 67.2f, 67.5f }, { 67.8f, 67.8f }, { 68.1f, 68.1f },
        { 68.4f, 68.4f }, { 68.7f, 68.7f }, { 69.0f, 69.0f }, { 69.3f, 69.3f }, { 69.45f, 69.45f }, { 69.6f, 69.9f },
        { 70.2f, 70.2f }, { 70.35f, 70.35f }, { 70.5f, 70.5f }, { 70.65f, 70.65f }, { 70.8f, 70.8f }, { 71.1f, 71.1f },
        { 71.4f, 71.7f }, { 72.0f, 72.0f }, { 72.3f, 72.3f }, { 72.6f, 72.9f }, { 73.2f, 73.2f }, { 73.35f, 73.35f },
        { 73.5f, 73.5f }, { 73.65f, 73.65f }, { 73.8f, 73.8f }, { 73.95f, 73.95f }, { 74.1f, 74.1f },
        { 74.25f, 74.25f }, { 74.4f, 74.4f }, { 74.55f, 74.55f }, { 74.7f, 74.7f }, { 74.85f, 74.85f },
        { 75.0f, 75.0f }, { 75.15f, 75.15f }, { 75.3f, 75.3f }, { 75.45f, 75.45f }, { 75.6f, 75.6f },
        { 75.75f, 75.75f }, { 75.9f, 75.9f }, { 76.05f, 76.05f }, { 76.2f, 76.2f }, { 76.35f, 76.35f },
        { 76.5f, 76.5f }, { 76.65f, 76.65f }, { 76.8f, 76.8f }, { 76.95f, 76.95f }, { 77.1f, 77.1f },
        { 77.25f, 77.25f }, { 77.4f, 77.4f }, { 77.55f, 77.55f }, { 77.7f, 77.7f }, { 77.85f, 77.85f },
        { 78.0f, 78.0f }, { 78.15f, 78.15f }, { 78.3f, 78.3f }, { 78.45f, 78.45f }, { 78.6f, 78.6f }, { 78.9f, 78.9f },
        { 79.2f, 79.2f }, { 79.35f, 79.35f }, { 79.5f, 79.5f }, { 79.65f, 79.65f }, { 79.8f, 79.8f },
        { 79.95f, 79.95f }, { 80.1f, 80.1f }, { 80.25f, 80.25f }, { 80.4f, 80.4f }, { 80.55f, 80.55f },
        { 80.7f, 80.7f }, { 80.85f, 80.85f }, { 81.0f, 81.0f }, { 81.3f, 81.3f }, { 81.45f, 81.45f }, { 81.6f, 81.6f },
        { 81.75f, 81.75f }, { 81.9f, 81.9f }, { 82.05f, 82.05f }, { 82.2f, 82.2f }, { 82.35f, 82.35f },
        { 82.5f, 82.5f }, { 82.65f, 82.65f }, { 82.8f, 82.8f }, { 82.95f, 82.95f }, { 83.1f, 83.1f },
        { 83.25f, 83.25f }, { 83.4f, 83.4f }, { 83.7f, 83.7f }, { 83.85f, 83.85f }, { 84.0f, 84.0f },
        { 84.15f, 84.15f }, { 84.3f, 84.3f }, { 84.45f, 84.45f }, { 84.6f, 84.6f }, { 84.75f, 84.75f },
        { 84.9f, 84.9f }, { 85.05f, 85.05f }, { 85.2f, 85.2f }, { 85.35f, 85.35f }, { 85.5f, 85.5f },
        { 85.65f, 85.65f }, { 85.8f, 85.8f }, { 85.95f, 85.95f }, { 86.1f, 86.1f }, { 86.25f, 86.25f },
        { 86.4f, 86.4f }, { 86.55f, 86.55f }, { 86.7f, 86.7f }, { 86.85f, 86.85f }, { 87.0f, 87.0f },
        { 87.15f, 87.15f }, { 87.3f, 87.3f }, { 87.45f, 87.45f }, { 87.6f, 87.6f }, { 87.9f, 87.9f }, { 88.2f, 88.2f },
        { 88.5f, 88.5f }, { 88.8f, 88.8f }, { 88.95f, 88.95f }, { 89.1f, 89.1f }, { 89.25f, 89.25f }, { 89.4f, 89.4f },
        { 89.55f, 89.55f }, { 89.7f, 89.7f }, { 89.85f, 89.85f }, { 90.0f, 90.0f }, { 90.15f, 90.15f },
        { 90.3f, 90.3f }, { 90.45f, 90.45f }, { 90.6f, 90.6f }, { 90.75f, 90.75f }, { 90.9f, 90.9f },
        { 91.05f, 91.05f }, { 91.2f, 91.2f }, { 91.35f, 91.35f }, { 91.5f, 91.5f }, { 91.65f, 91.65f },
        { 91.8f, 91.8f }, { 91.95f, 91.95f }, { 92.1f, 92.1f }, { 92.25f, 92.25f }, { 92.4f, 92.4f },
        { 92.55f, 92.55f }, { 92.7f, 92.7f }, { 92.85f, 92.85f }, { 93.0f, 93.0f }, { 93.3f, 93.3f },
        { 93.45f, 93.45f }, { 93.6f, 93.6f }, { 93.75f, 93.75f }, { 93.9f, 93.9f }, { 94.05f, 94.05f },
        { 94.2f, 94.2f }, { 94.35f, 94.35f }, { 94.5f, 94.5f }, { 94.8f, 94.8f }, { 94.95f, 94.95f }, { 95.1f, 95.1f },
        { 95.25f, 95.25f }, { 95.4f, 95.4f }, { 95.55f, 95.55f }, { 95.7f, 95.7f }, { 95.85f, 95.85f },
        { 96.0f, 96.0f }, { 96.3f, 96.3f }, { 96.6f, 96.6f }, { 96.9f, 96.9f }, { 97.05f, 97.05f }, { 97.2f, 98.1f },
        { 98.4f, 98.4f }, { 98.55f, 98.55f }, { 98.7f, 98.7f }, { 98.85f, 98.85f }, { 99.0f, 99.0f },
        { 99.15f, 99.15f }, { 99.3f, 99.3f }, { 99.45f, 99.45f }, { 99.6f, 99.6f }, { 99.75f, 99.75f },
        { 99.9f, 99.9f }, { 100.05f, 100.05f }, { 100.2f, 100.2f }, { 100.35f, 100.35f }, { 100.5f, 100.5f },
        { 100.65f, 100.65f }, { 100.8f, 100.8f }, { 100.95f, 100.95f }, { 101.1f, 101.1f }, { 101.25f, 101.25f },
        { 101.4f, 101.4f }, { 101.55f, 101.55f }, { 101.7f, 101.7f }, { 101.85f, 101.85f }, { 102.0f, 102.0f },
        { 102.15f, 102.15f }, { 102.3f, 102.3f }, { 102.45f, 102.45f }, { 102.6f, 102.6f }, { 102.75f, 102.75f },
        { 102.9f, 102.9f }, { 103.05f, 103.05f }, { 103.2f, 103.2f }, { 103.35f, 103.35f }, { 103.5f, 103.5f },
        { 103.65f, 103.65f }, { 103.8f, 103.8f }, { 103.95f, 103.95f }, { 104.1f, 104.1f }, { 104.25f, 104.25f },
        { 104.4f, 104.4f }, { 104.55f, 104.55f }, { 104.7f, 104.7f }, { 104.85f, 104.85f }, { 105.0f, 105.0f },
        { 105.15f, 105.15f }, { 105.3f, 105.3f }, { 105.45f, 105.45f }, { 105.6f, 105.6f }, { 105.75f, 105.75f },
        { 105.9f, 105.9f }, { 106.05f, 106.05f }, { 106.2f, 106.2f }, { 106.35f, 106.35f }, { 106.5f, 106.5f },
        { 106.65f, 106.65f }, { 106.8f, 106.8f }, { 107.1f, 107.1f }, { 107.4f, 107.4f }, { 107.7f, 107.7f },
        { 107.95f, 107.95f }, { 108.0f, 108.0f }, { 108.15f, 108.15f }, { 108.3f, 108.3f }, { 108.45f, 108.45f },
        { 108.6f, 108.6f }, { 108.75f, 108.75f }, { 108.9f, 108.9f }, { 109.05f, 109.05f }, { 109.2f, 109.2f },
        { 109.35f, 109.35f }, { 109.5f, 109.5f }, { 109.65f, 109.65f }, { 109.8f, 109.8f }, { 109.95f, 109.95f },
        { 110.1f, 110.1f }, { 110.25f, 110.25f }, { 110.4f, 110.4f }, { 110.55f, 110.55f }, { 110.7f, 110.7f },
        { 110.85f, 110.85f }, { 111.0f, 111.0f }, { 111.15f, 111.15f }, { 111.3f, 111.3f }, { 111.45f, 111.45f },
        { 111.6f, 111.6f }, { 111.75f, 111.75f }, { 111.9f, 111.9f }, { 112.05f, 112.05f }, { 112.2f, 112.2f },
        { 112.35f, 112.35f }, { 112.5f, 112.5f }, { 112.65f, 112.65f }, { 112.8f, 112.8f }, { 112.95f, 112.95f },
        { 113.1f, 113.1f }, { 113.25f, 113.25f }, { 113.4f, 113.4f }, { 113.55f, 113.55f }, { 113.7f, 113.7f },
        { 113.85f, 113.85f }, { 114.0f, 114.0f }, { 114.15f, 114.15f }, { 114.3f, 114.3f }, { 114.45f, 114.45f },
        { 114.6f, 114.6f }, { 114.75f, 114.75f }, { 114.9f, 114.9f }, { 115.05f, 115.05f }, { 115.2f, 115.2f },
        { 115.5f, 115.5f }, { 115.8f, 115.8f }, { 116.1f, 116.1f }, { 116.4f, 116.4f }, { 116.7f, 116.7f },
        { 117.0f, 117.0f }, { 117.3f, 117.3f }, { 117.6f, 117.6f }, { 117.75f, 117.75f }, { 117.9f, 117.9f },
        { 118.05f, 118.05f }, { 118.2f, 118.2f }, { 118.35f, 118.35f }, { 118.5f, 118.5f }, { 118.65f, 118.65f },
        { 118.8f, 118.8f }, { 118.95f, 118.95f }, { 119.1f, 119.1f }, { 119.25f, 119.25f }, { 119.4f, 119.4f },
        { 119.55f, 119.55f }, { 119.7f, 119.7f }, { 119.85f, 119.85f }, { 120.0f, 120.0f }, { 120.15f, 120.15f },
        { 120.3f, 120.3f }, { 120.45f, 120.45f }, { 120.6f, 120.6f }, { 120.75f, 120.75f }, { 120.9f, 120.9f },
        { 121.05f, 121.05f }, { 121.2f, 121.2f }, { 121.35f, 121.35f }, { 121.5f, 121.5f }, { 121.65f, 121.65f },
        { 121.8f, 121.8f }, { 121.95f, 121.95f }, { 122.1f, 122.1f }, { 122.25f, 122.25f }, { 122.4f, 122.4f },
        { 122.55f, 122.55f }, { 122.7f, 122.7f }, { 122.85f, 122.85f }, { 123.0f, 123.0f }, { 123.15f, 123.15f },
        { 123.3f, 123.3f }, { 123.45f, 123.45f }, { 123.6f, 123.6f }, { 123.75f, 123.75f }, { 123.9f, 123.9f },
        { 124.05f, 124.05f }, { 124.2f, 124.2f }, { 124.35f, 124.35f }, { 124.5f, 124.5f }, { 124.65f, 124.65f },
        { 124.8f, 124.8f }, { 124.95f, 124.95f }, { 125.1f, 125.1f }, { 125.25f, 125.25f }, { 125.4f, 125.4f },
        { 125.55f, 125.55f }, { 125.7f, 125.7f }, { 125.85f, 125.85f }, { 126.0f, 126.0f }, { 126.15f, 126.15f },
        { 126.3f, 126.3f }, { 126.6f, 126.6f }, { 126.9f, 126.9f }, { 127.2f, 127.2f }, { 127.35f, 127.35f },
        { 127.5f, 127.5f }, { 127.65f, 127.65f }, { 127.8f, 127.8f }, { 127.95f, 127.95f }, { 128.1f, 128.1f },
        { 128.25f, 128.25f }, { 128.4f, 128.4f }, { 128.55f, 128.55f }, { 128.7f, 128.7f }, { 128.85f, 128.85f },
        { 129.0f, 129.0f }, { 129.15f, 129.15f }, { 129.3f, 129.3f }, { 129.45f, 129.45f }, { 129.6f, 129.6f },
        { 129.75f, 129.75f }, { 129.9f, 129.9f }, { 130.05f, 130.05f }, { 130.2f, 130.2f }, { 130.35f, 130.35f },
        { 130.5f, 130.5f }, { 130.65f, 130.65f }, { 130.8f, 130.8f }, { 130.95f, 130.95f }, { 131.1f, 131.1f },
        { 131.25f, 131.25f }, { 131.4f, 131.4f }, { 131.55f, 131.55f }, { 131.7f, 131.7f }, { 131.85f, 131.85f },
        { 132.0f, 132.0f }, { 132.15f, 132.15f }, { 132.3f, 132.3f }, { 132.45f, 132.45f }, { 132.6f, 132.6f },
        { 132.75f, 132.75f }, { 132.9f, 132.9f }, { 133.05f, 133.05f }, { 133.2f, 133.2f }, { 133.35f, 133.35f },
        { 133.5f, 133.5f }, { 133.65f, 133.65f }, { 133.8f, 133.8f }, { 133.95f, 133.95f }, { 134.1f, 134.1f },
        { 134.25f, 134.25f }, { 134.4f, 134.4f }, { 134.7f, 134.7f }, { 135.0f, 135.0f }, { 135.3f, 135.3f },
        { 135.6f, 135.6f }, { 135.75f, 135.75f }, { 135.9f, 135.9f }, { 136.05f, 136.05f }, { 136.2f, 136.2f },
        { 136.35f, 136.35f }, { 136.5f, 136.5f }, { 136.65f, 136.65f }, { 136.8f, 139.2f }
    };

    private short[] posType = new short[]
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    private short[] itemType = new short[]
    {
        1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 2, 0, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 1, 1,
        1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2
    };
    
    private void Awake()
    {
        nodeHandler = note.GetComponent<Note>();
    }
    
    // Start is called before the first frame update
    void Start()
    {
        StartCoroutine(SpawnNewItem(time, posType, itemType));
    }

    private IEnumerator SpawnNewItem(float[,] timeArr, short[] posArr, short[] itemArr)
    {
        int len = timeArr.Length, ind = 1;
        float yPos = 0;
        while (ind < len)
        {
            yield return new WaitForSeconds(timeArr[ind, 0]-timeArr[ind-1, 0]);
            //Debug.Log("Note Up:" + time[ind, 0]);
            if (posArr[ind-1] == 0)
            {
                yPos = -4;
            }
            else if (posArr[ind-1] == 1)
            {
                yPos = 4;
            }
            spawnPos = new Vector3(13, yPos, 0);

            if (itemArr[ind-1] == 0)
            {
                newItem = Instantiate(gravSwitch, spawnPos, Quaternion.identity);
            }
            else if(itemArr[ind-1] != 0)
            {
                newItem = Instantiate(note, spawnPos, Quaternion.identity);
            }
            if (timeArr[ind, 1] - timeArr[ind, 0] != 0 && !newItem.IsDestroyed())
            {
                //Debug.Log("length: " + (timeArr[ind, 1]-timeArr[ind, 0])/nodeHandler.speed);
                newItem.transform.localScale =
                    new Vector3((timeArr[ind, 1]-timeArr[ind, 0])/nodeHandler.speed, nodeHandler.transform.localScale.y, 0);
            }
            rend = newItem.GetComponent<SpriteRenderer>();
            ind++;
        }
    }
}
