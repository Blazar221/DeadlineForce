using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class NoteSpawnerDown : MonoBehaviour
{
    [SerializeField] 
    private GameObject note;

    private GameObject newNote;
    private SpriteRenderer rend;
    private Vector3 spawnPos;
    private Note nodeHandler; 

    private float[,] time = new float[,]
    {
        {0, 0}, {2.4f, 2.4f}, {2.7f, 2.7f}, {3.15f, 3.15f}, {3.3f, 3.3f}, {3.45f, 3.45f}, {3.6f, 3.9f}, {4.2f, 4.5f}, {4.8f, 5.1f}, {5.2f, 5.2f}, {5.4f, 5.4f}, {5.85f, 5.85f}, {6.0f, 6.0f}, {6.6f, 6.6f}, {7.2f, 7.2f}, {7.8f, 7.8f}, {8.4f, 8.4f}, {8.7f, 8.7f}, {8.8f, 8.8f}, {8.9f, 8.9f}, {9.0f, 9.0f}, {9.3f, 9.3f}, {9.6f, 9.6f}, {9.9f, 9.9f}, {10.2f, 10.2f}, {10.5f, 10.5f}, {10.8f, 10.8f}, {11.1f, 11.1f}, {11.4f, 11.4f}, {11.7f, 11.7f}, {12.0f, 12.0f}, {21.6f, 21.6f}, {21.75f, 21.75f}, {21.9f, 21.9f}, {22.05f, 22.05f}, {22.2f, 22.2f}, {22.35f, 22.35f}, {22.5f, 22.5f}, {22.65f, 22.65f}, {22.8f, 22.8f}, {22.95f, 22.95f}, {23.1f, 23.1f}, {23.25f, 23.25f}, {23.4f, 23.4f}, {23.7f, 23.7f}, {23.85f, 23.85f}, {24.0f, 24.0f}, {24.15f, 24.15f}, {24.3f, 24.3f}, {24.45f, 24.45f}, {24.6f, 24.6f}, {24.75f, 24.75f}, {24.9f, 24.9f}, {25.05f, 25.05f}, {25.2f, 25.2f}, {25.35f, 25.35f}, {25.5f, 25.5f}, {25.65f, 25.65f}, {25.8f, 25.8f}, {26.1f, 26.1f}, {26.25f, 26.25f}, {26.4f, 26.4f}, {26.55f, 26.55f}, {26.7f, 26.7f}, {26.85f, 26.85f}, {27.0f, 27.0f}, {27.15f, 27.15f}, {27.3f, 27.3f}, {27.45f, 27.45f}, {27.6f, 27.6f}, {27.75f, 27.75f}, {27.9f, 27.9f}, {28.05f, 28.05f}, {28.2f, 28.2f}, {28.35f, 28.35f}, {28.5f, 28.5f}, {28.65f, 28.65f}, {28.8f, 28.8f}, {28.95f, 28.95f}, {29.1f, 29.1f}, {29.25f, 29.25f}, {29.4f, 29.4f}, {29.55f, 29.55f}, {29.7f, 29.7f}, {29.85f, 29.85f}, {30.0f, 30.0f}, {30.3f, 30.3f}, {41.1f, 41.1f}, {41.4f, 41.4f}, {41.55f, 41.55f}, {41.7f, 41.7f}, {41.85f, 41.85f}, {42.0f, 42.0f}, {42.3f, 42.3f}, {42.6f, 42.9f}, {43.2f, 43.2f}, {43.5f, 43.5f}, {43.65f, 44.1f}, {44.25f, 44.7f}, {45.0f, 45.3f}, {45.6f, 45.9f}, {46.2f, 46.5f}, {46.8f, 46.8f}, {47.1f, 47.4f}, {47.7f, 47.7f}, {48.0f, 48.3f}, {60.75f, 60.75f}, {60.9f, 60.9f}, {61.05f, 61.05f}, {61.2f, 61.2f}, {61.5f, 61.5f}, {62.4f, 62.4f}, {62.7f, 62.7f}, {66.0f, 66.0f}, {61.8f, 62.1f}, {62.85f, 63.3f}, {63.45f, 63.9f}, {64.2f, 64.5f}, {64.8f, 65.1f}, {65.4f, 65.7f}, {66.3f, 66.6f}, {66.9f, 66.9f},  {67.2f, 67.5f}, {67.8f, 67.8f}, {68.1f, 68.1f}, {68.4f, 68.4f}, {68.7f, 68.7f}, {79.2f, 79.2f}, {79.35f, 79.35f}, {79.5f, 79.5f}, {79.65f, 79.65f}, {79.8f, 79.8f}, {79.95f, 79.95f}, {80.1f, 80.1f}, {80.25f, 80.25f}, {80.4f, 80.4f}, {80.55f, 80.55f}, {80.7f, 80.7f}, {80.85f, 80.85f}, {81.0f, 81.0f}, {81.3f, 81.3f}, {81.45f, 81.45f}, {81.6f, 81.6f}, {81.75f, 81.75f}, {81.9f, 81.9f}, {82.05f, 82.05f}, {82.2f, 82.2f}, {82.35f, 82.35f}, {82.5f, 82.5f}, {82.65f, 82.65f}, {82.8f, 82.8f}, {82.95f, 82.95f}, {83.1f, 83.1f}, {83.25f, 83.25f}, {83.4f, 83.4f}, {83.7f, 83.7f}, {83.85f, 83.85f}, {84.0f, 84.0f}, {84.15f, 84.15f}, {84.3f, 84.3f}, {84.45f, 84.45f}, {84.6f, 84.6f}, {84.75f, 84.75f}, {84.9f, 84.9f}, {85.05f, 85.05f}, {85.2f, 85.2f}, {85.35f, 85.35f}, {85.5f, 85.5f}, {85.65f, 85.65f}, {85.8f, 85.8f}, {85.95f, 85.95f}, {86.1f, 86.1f}, {86.25f, 86.25f}, {86.4f, 86.4f}, {86.55f, 86.55f}, {86.7f, 86.7f}, {86.85f, 86.85f}, {87.0f, 87.0f}, {87.15f, 87.15f}, {87.3f, 87.3f}, {87.45f, 87.45f}, {87.6f, 87.6f}, {87.9f, 87.9f}, {97.2f, 98.1f}, {98.55f, 98.55f}, {98.7f, 98.7f}, {98.85f, 98.85f}, {99.0f, 99.0f}, {99.15f, 99.15f}, {99.3f, 99.3f}, {99.45f, 99.45f}, {99.6f, 99.6f}, {99.75f, 99.75f}, {99.9f, 99.9f}, {100.05f, 100.05f}, {100.2f, 100.2f}, {100.35f, 100.35f}, {100.5f, 100.5f}, {100.65f, 100.65f}, {100.8f, 100.8f}, {100.95f, 100.95f}, {101.1f, 101.1f}, {101.25f, 101.25f}, {101.4f, 101.4f}, {101.55f, 101.55f}, {101.7f, 101.7f}, {101.85f, 101.85f}, {102.0f, 102.0f}, {102.15f, 102.15f}, {102.3f, 102.3f}, {102.45f, 102.45f}, {102.6f, 102.6f}, {102.75f, 102.75f}, {102.9f, 102.9f}, {103.05f, 103.05f}, {103.2f, 103.2f}, {103.35f, 103.35f}, {103.5f, 103.5f}, {103.65f, 103.65f}, {103.8f, 103.8f}, {103.95f, 103.95f}, {104.1f, 104.1f}, {104.25f, 104.25f}, {104.4f, 104.4f}, {104.55f, 104.55f}, {104.7f, 104.7f}, {104.85f, 104.85f}, {105.0f, 105.0f}, {105.15f, 105.15f}, {105.3f, 105.3f}, {105.45f, 105.45f}, {105.6f, 105.6f}, {105.75f, 105.75f}, {105.9f, 105.9f}, {106.05f, 106.05f}, {106.2f, 106.2f}, {106.35f, 106.35f}, {106.5f, 106.5f}, {106.65f, 106.65f}, {106.8f, 106.8f}, {107.1f, 107.1f}, {115.8f, 115.8f}, {116.1f, 116.1f}, {116.4f, 116.4f}, {116.7f, 116.7f}, {117.0f, 117.0f}, {117.3f, 117.3f}, {117.6f, 117.6f}, {117.75f, 117.75f}, {117.9f, 117.9f}, {118.05f, 118.05f}, {118.2f, 118.2f}, {118.35f, 118.35f}, {118.5f, 118.5f}, {118.65f, 118.65f}, {118.8f, 118.8f}, {118.95f, 118.95f}, {119.1f, 119.1f}, {119.25f, 119.25f}, {119.4f, 119.4f}, {119.55f, 119.55f}, {119.7f, 119.7f}, {119.85f, 119.85f}, {120.0f, 120.0f}, {120.15f, 120.15f}, {120.3f, 120.3f}, {120.45f, 120.45f}, {120.6f, 120.6f}, {120.75f, 120.75f}, {120.9f, 120.9f}, {121.05f, 121.05f}, {121.2f, 121.2f}, {121.35f, 121.35f}, {121.5f, 121.5f}, {121.65f, 121.65f}, {121.8f, 121.8f}, {121.95f, 121.95f}, {122.1f, 122.1f}, {122.25f, 122.25f}, {122.4f, 122.4f}, {122.55f, 122.55f}, {122.7f, 122.7f}, {122.85f, 122.85f}, {123.0f, 123.0f}, {123.15f, 123.15f}, {123.3f, 123.3f}, {123.45f, 123.45f}, {123.6f, 123.6f}, {123.75f, 123.75f}, {123.9f, 123.9f}, {124.05f, 124.05f}, {124.2f, 124.2f}, {124.35f, 124.35f}, {124.5f, 124.5f}, {124.65f, 124.65f}, {124.8f, 124.8f}, {124.95f, 124.95f}, {125.1f, 125.1f}, {125.25f, 125.25f}, {125.4f, 125.4f}, {125.55f, 125.55f}, {125.7f, 125.7f}, {125.85f, 125.85f}, {126.0f, 126.0f}, {126.15f, 126.15f}, {126.3f, 126.3f}, {135.6f, 135.6f}, {135.75f, 135.75f}, {135.9f, 135.9f}, {136.05f, 136.05f}, {136.2f, 136.2f}, {136.35f, 136.35f}, {136.5f, 136.5f}, {136.65f, 136.65f}, {136.8f, 139.2f}
    };

    private void Awake()
    {
        nodeHandler = note.GetComponent<Note>();
    }

    // Start is called before the first frame update
    void Start()
    {
        StartCoroutine(SpawnNewBlock(time));
    }

    private IEnumerator SpawnNewBlock(float[,] timeArr)
    {
        int len = timeArr.Length, ind = 1;
        while (ind < len)
        {
            yield return new WaitForSeconds(timeArr[ind, 0]-timeArr[ind-1, 0]);
            Debug.Log("Note Down:" + time[ind, 0]);
            spawnPos = new Vector3(0, -4, 0);
            newNote = Instantiate(note, spawnPos, Quaternion.identity);
            if (timeArr[ind, 1] - timeArr[ind, 0] != 0)
            {
                
                //Debug.Log("length: " + (timeArr[ind, 1]-timeArr[ind, 0])/nodeHandler.speed);
                newNote.transform.localScale =
                    new Vector3((timeArr[ind, 1]-timeArr[ind, 0])/nodeHandler.speed, nodeHandler.transform.localScale.y, 0);
            }
            rend = newNote.GetComponent<SpriteRenderer>();
            ind++;
        }
    }
}
